{"version":3,"file":"tiptap-markdown.umd.js","sources":["../src/extensions/tiptap/tight-lists.js","../src/util/markdown.js","../src/serialize/state.js","../src/extensions/marks/html.js","../src/util/dom.js","../src/extensions/nodes/html.js","../src/extensions/nodes/blockquote.js","../src/extensions/nodes/bullet-list.js","../src/extensions/nodes/code-block.js","../src/extensions/nodes/hard-break.js","../src/extensions/nodes/heading.js","../src/extensions/nodes/horizontal-rule.js","../src/extensions/nodes/image.js","../src/extensions/nodes/list-item.js","../src/extensions/nodes/ordered-list.js","../src/extensions/nodes/paragraph.js","../src/util/prosemirror.js","../src/extensions/nodes/table.js","../src/extensions/nodes/task-item.js","../src/extensions/nodes/task-list.js","../src/extensions/nodes/text.js","../src/extensions/marks/bold.js","../src/extensions/marks/code.js","../src/extensions/marks/italic.js","../src/extensions/marks/link.js","../src/extensions/marks/strike.js","../src/extensions/index.js","../src/util/extensions.js","../src/serialize/MarkdownSerializer.js","../src/parse/MarkdownParser.js","../src/extensions/tiptap/clipboard.js","../src/Markdown.js"],"sourcesContent":["import { Extension } from \"@tiptap/core\";\n\nexport const MarkdownTightLists = Extension.create({\n    name: 'markdownTightLists',\n    addOptions: () => ({\n        tight: true,\n        tightClass: 'tight',\n        listTypes: [\n            'bulletList',\n            'orderedList',\n        ],\n    }),\n    addGlobalAttributes() {\n        return [\n            {\n                types: this.options.listTypes,\n                attributes: {\n                    tight: {\n                        default: this.options.tight,\n                        parseHTML: element =>\n                            element.getAttribute('data-tight') === 'true' || !element.querySelector('p'),\n                        renderHTML: attributes => ({\n                            class: attributes.tight ? this.options.tightClass : null,\n                            'data-tight': attributes.tight ? 'true' : null,\n                        }),\n                    },\n                },\n            },\n        ]\n    },\n    addCommands() {\n        return {\n            toggleTight: (tight = null) => ({ editor, commands }) => {\n                function toggleTight(name) {\n                    if(!editor.isActive(name)) {\n                        return false;\n                    }\n                    const attrs = editor.getAttributes(name);\n                    return commands.updateAttributes(name, {\n                        tight: tight ?? !attrs?.tight,\n                    });\n                }\n                return this.options.listTypes\n                    .some(name => toggleTight(name));\n            }\n        }\n    },\n});\n","import markdownit from 'markdown-it';\n\nconst md = markdownit();\n\nfunction scanDelims(text, pos) {\n    md.inline.State.prototype.scanDelims.call({ src: text, posMax: text.length })\n    const state = new (md.inline.State)(text, null, null, []);\n    return state.scanDelims(pos, true);\n}\n\nexport function shiftDelim(text, delim, start, offset) {\n    let res = text.substring(0, start) + text.substring(start + delim.length);\n    res = res.substring(0, start + offset) + delim + res.substring(start + offset);\n    return res;\n}\n\nfunction trimStart(text, delim, from, to) {\n    let pos = from, res = text;\n    while(pos < to) {\n        if(scanDelims(res, pos).can_open) {\n            break;\n        }\n        res = shiftDelim(res, delim, pos, 1);\n        pos++;\n    }\n    return { text: res, from: pos, to }\n}\n\nfunction trimEnd(text, delim, from, to) {\n    let pos = to, res = text;\n    while(pos > from) {\n        if(scanDelims(res, pos).can_close) {\n            break;\n        }\n        res = shiftDelim(res, delim, pos, -1);\n        pos--;\n    }\n    return { text: res, from, to: pos }\n}\n\nexport function trimInline(text, delim, from, to) {\n    let state = {\n        text,\n        from,\n        to,\n    }\n\n    state = trimStart(state.text, delim, state.from, state.to);\n    state = trimEnd(state.text, delim, state.from, state.to);\n\n    if(state.to - state.from < delim.length + 1) {\n        state.text = state.text.substring(0, state.from) + state.text.substring(state.to + delim.length);\n    }\n\n    return state.text;\n}\n","import { MarkdownSerializerState as BaseMarkdownSerializerState } from \"prosemirror-markdown\";\nimport { trimInline } from \"../util/markdown\";\n\n/**\n * Override default MarkdownSerializerState to:\n * - handle commonmark delimiters (https://spec.commonmark.org/0.29/#left-flanking-delimiter-run)\n */\nexport class MarkdownSerializerState extends BaseMarkdownSerializerState {\n    inTable = false;\n\n    constructor(nodes, marks, options) {\n        super(nodes, marks, options ?? {});\n        this.inlines = [];\n    }\n\n    render(node, parent, index) {\n        if (node.type.name === \"paragraph\" && node.content.size === 0) {\n            this.out += \"<p></p>\";\n        } else {\n            super.render(node, parent, index);\n            const top = this.inlines[this.inlines.length - 1];\n            if (top?.start && top?.end) {\n                const { delimiter, start, end } = this.normalizeInline(top);\n                this.out = trimInline(this.out, delimiter, start, end);\n                this.inlines.pop();\n            }\n        }\n    }\n\n    renderContent(fragment) {\n        fragment.forEach((node, _, i) => {\n            if (i && node.type.name === \"paragraph\") {\n                this.out += \"\\n\";\n            }\n            this.render(node);\n        });\n    }\n\n    markString(mark, open, parent, index) {\n        const info = this.marks[mark.type.name];\n        if (info.expelEnclosingWhitespace) {\n            if (open) {\n                this.inlines.push({\n                    start: this.out.length,\n                    delimiter: info.open,\n                });\n            } else {\n                const top = this.inlines.pop();\n                this.inlines.push({\n                    ...top,\n                    end: this.out.length,\n                });\n            }\n        }\n        return super.markString(mark, open, parent, index);\n    }\n\n    normalizeInline(inline) {\n        let { start, end } = inline;\n        while (this.out.charAt(start).match(/\\s/)) {\n            start++;\n        }\n        return {\n            ...inline,\n            start,\n        };\n    }\n}\n","import { Fragment } from \"@tiptap/pm/model\";\nimport { getHTMLFromFragment, Mark } from \"@tiptap/core\";\n\n\nexport default Mark.create({\n    name: 'markdownHTMLMark',\n    /**\n     * @return {{markdown: MarkdownMarkSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: {\n                    open(state, mark)  {\n                        if(!this.editor.storage.markdown.options.html) {\n                            console.warn(`Tiptap Markdown: \"${mark.type.name}\" mark is only available in html mode`);\n                            return '';\n                        }\n                        return getMarkTags(mark)?.[0] ?? '';\n                    },\n                    close(state, mark) {\n                        if(!this.editor.storage.markdown.options.html) {\n                            return '';\n                        }\n                        return getMarkTags(mark)?.[1] ?? '';\n                    },\n                },\n                parse: {\n                    // handled by markdown-it\n                }\n            }\n        }\n    }\n});\n\nfunction getMarkTags(mark) {\n    const schema = mark.type.schema;\n    const node = schema.text(' ', [mark]);\n    const html = getHTMLFromFragment(Fragment.from(node), schema);\n    const match = html.match(/^(<.*?>) (<\\/.*?>)$/);\n    return match ? [match[1], match[2]] : null;\n}\n","\n\nexport function elementFromString(value) {\n    // add a wrapper to preserve leading and trailing whitespace\n    const wrappedValue = `<body>${value}</body>`\n\n    return new window.DOMParser().parseFromString(wrappedValue, 'text/html').body\n}\n\nexport function escapeHTML(value) {\n    return value\n        ?.replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\n\nexport function extractElement(node) {\n    const parent = node.parentElement;\n    const prepend = parent.cloneNode();\n\n    while(parent.firstChild && parent.firstChild !== node) {\n        prepend.appendChild(parent.firstChild);\n    }\n\n    if(prepend.childNodes.length > 0) {\n        parent.parentElement.insertBefore(prepend, parent);\n    }\n    parent.parentElement.insertBefore(node, parent);\n    if(parent.childNodes.length === 0) {\n        parent.remove();\n    }\n}\n\nexport function unwrapElement(node) {\n    const parent = node.parentNode;\n\n    while (node.firstChild) parent.insertBefore(node.firstChild, node);\n\n    parent.removeChild(node);\n}\n","import { Fragment } from \"@tiptap/pm/model\";\nimport { getHTMLFromFragment, Node } from \"@tiptap/core\";\nimport { elementFromString } from \"../../util/dom\";\n\n\nexport default Node.create({\n    name: 'markdownHTMLNode',\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node, parent) {\n                    if(this.editor.storage.markdown.options.html) {\n                        state.write(serializeHTML(node, parent));\n                    } else {\n                        console.warn(`Tiptap Markdown: \"${node.type.name}\" node is only available in html mode`);\n                        state.write(`[${node.type.name}]`);\n                    }\n                    if(node.isBlock) {\n                        state.closeBlock(node);\n                    }\n                },\n                parse: {\n                    // handled by markdown-it\n                },\n            },\n        }\n    }\n});\n\nfunction serializeHTML(node, parent) {\n    const schema = node.type.schema;\n    const html = getHTMLFromFragment(Fragment.from(node), schema);\n\n    if(node.isBlock && (parent instanceof Fragment || parent.type.name === schema.topNodeType.name)) {\n        return formatBlock(html);\n    }\n\n    return html;\n}\n\n/**\n * format html block as per the commonmark spec\n */\nfunction formatBlock(html) {\n    const dom = elementFromString(html);\n    const element = dom.firstElementChild;\n\n    element.innerHTML = element.innerHTML.trim()\n        ? `\\n${element.innerHTML}\\n`\n        : `\\n`;\n\n    return element.outerHTML;\n}\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Blockquote = Node.create({\n    name: 'blockquote',\n});\n\nexport default Blockquote.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.blockquote,\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\n\n\nconst BulletList = Node.create({\n    name: 'bulletList',\n});\n\nexport default BulletList.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node) {\n                    return state.renderList(node, \"  \", () => (this.editor.storage.markdown.options.bulletListMarker || \"-\") + \" \");\n                },\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\n\n\nconst CodeBlock = Node.create({\n    name: 'codeBlock',\n});\n\nexport default CodeBlock.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node) {\n                    state.write(\"```\" + (node.attrs.language || \"\") + \"\\n\");\n                    state.text(node.textContent, false);\n                    state.ensureNewLine();\n                    state.write(\"```\");\n                    state.closeBlock(node);\n                },\n                parse: {\n                    setup(markdownit) {\n                        markdownit.set({\n                            langPrefix: this.options.languageClassPrefix ?? 'language-',\n                        });\n                    },\n                    updateDOM(element) {\n                        element.innerHTML = element.innerHTML.replace(/\\n<\\/code><\\/pre>/g, '</code></pre>')\n                    },\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport HTMLNode from './html';\n\nconst HardBreak = Node.create({\n    name: 'hardBreak',\n});\n\nexport default HardBreak.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node, parent, index) {\n                    for (let i = index + 1; i < parent.childCount; i++)\n                        if (parent.child(i).type != node.type) {\n                            state.write(\n                                state.inTable\n                                    ? HTMLNode.storage.markdown.serialize.call(this, state, node, parent)\n                                    : \"\\\\\\n\"\n                            );\n                            return;\n                        }\n                },\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Heading = Node.create({\n    name: 'heading',\n});\n\nexport default Heading.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.heading,\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst HorizontalRule = Node.create({\n    name: 'horizontalRule',\n});\n\nexport default HorizontalRule.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.horizontal_rule,\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Image = Node.create({\n    name: 'image',\n});\n\nexport default Image.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.image,\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst ListItem = Node.create({\n    name: 'listItem',\n});\n\nexport default ListItem.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.list_item,\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\n\n\nconst OrderedList = Node.create({\n    name: 'orderedList',\n});\n\nfunction findIndexOfAdjacentNode(node, parent, index) {\n    let i = 0;\n    for (; index - i > 0; i++) {\n        if (parent.child(index - i - 1).type.name !== node.type.name) {\n            break;\n        }\n    }\n    return i;\n}\n\nexport default OrderedList.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node, parent, index) {\n                    const start = node.attrs.start || 1\n                    const maxW = String(start + node.childCount - 1).length\n                    const space = state.repeat(\" \", maxW + 2)\n                    const adjacentIndex = findIndexOfAdjacentNode(node, parent, index);\n                    const separator = adjacentIndex % 2 ? ') ' : '. ';\n                    state.renderList(node, space, i => {\n                        const nStr = String(start + i)\n                        return state.repeat(\" \", maxW - nStr.length) + nStr + separator;\n                    })\n                },\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Paragraph = Node.create({\n    name: 'paragraph',\n});\n\nexport default Paragraph.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.nodes.paragraph,\n                parse: {\n                    // handled by markdown-it\n                },\n            },\n        }\n    }\n});\n","\n\nexport function childNodes(node) {\n    return node?.content?.content ?? [];\n}\n","import { Node } from \"@tiptap/core\";\nimport { childNodes } from \"../../util/prosemirror\";\nimport HTMLNode from './html';\n\nconst Table = Node.create({\n    name: 'table',\n});\n\nexport default Table.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node, parent) {\n                    if(!isMarkdownSerializable(node)) {\n                        HTMLNode.storage.markdown.serialize.call(this, state, node, parent);\n                        return;\n                    }\n                    state.inTable = true;\n                    node.forEach((row, p, i) => {\n                        state.write('| ');\n                        row.forEach((col, p, j) => {\n                            if(j) {\n                                state.write(' | ');\n                            }\n                            const cellContent = col.firstChild;\n                            if(cellContent.textContent.trim()) {\n                                state.renderInline(cellContent);\n                            }\n                        });\n                        state.write(' |')\n                        state.ensureNewLine();\n                        if(!i) {\n                            const delimiterRow = Array.from({length: row.childCount}).map(() => '---').join(' | ');\n                            state.write(`| ${delimiterRow} |`);\n                            state.ensureNewLine();\n                        }\n                    });\n                    state.closeBlock(node);\n                    state.inTable = false;\n                },\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n})\n\n\nfunction hasSpan(node) {\n    return node.attrs.colspan > 1 || node.attrs.rowspan > 1;\n}\n\nfunction isMarkdownSerializable(node) {\n    const rows = childNodes(node);\n    const firstRow = rows[0];\n    const bodyRows = rows.slice(1);\n\n    if(childNodes(firstRow).some(cell => cell.type.name !== 'tableHeader' || hasSpan(cell) || cell.childCount > 1)) {\n        return false;\n    }\n\n    if(bodyRows.some(row =>\n        childNodes(row).some(cell => cell.type.name === 'tableHeader' || hasSpan(cell) || cell.childCount > 1)\n    )) {\n        return false;\n    }\n\n    return true;\n}\n","import { Node } from \"@tiptap/core\";\n\n\nconst TaskItem = Node.create({\n    name: 'taskItem',\n});\n\nexport default TaskItem.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node) {\n                    const check = node.attrs.checked ? '[x]' : '[ ]';\n                    state.write(`${check} `);\n                    state.renderContent(node);\n                },\n                parse: {\n                    updateDOM(element) {\n                        [...element.querySelectorAll('.task-list-item')]\n                            .forEach(item => {\n                                const input = item.querySelector('input');\n                                item.setAttribute('data-type', 'taskItem');\n                                if(input) {\n                                    item.setAttribute('data-checked', input.checked);\n                                    input.remove();\n                                }\n                            });\n                    },\n                }\n            }\n        }\n    }\n});\n","import taskListPlugin from \"markdown-it-task-lists\";\nimport { Node } from \"@tiptap/core\";\nimport BulletList from \"./bullet-list\";\n\n\nconst TaskList = Node.create({\n    name: 'taskList',\n});\n\nexport default TaskList.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: BulletList.storage.markdown.serialize,\n                parse: {\n                    setup(markdownit) {\n                        markdownit.use(taskListPlugin);\n                    },\n                    updateDOM(element) {\n                        [...element.querySelectorAll('.contains-task-list')]\n                            .forEach(list => {\n                                list.setAttribute('data-type', 'taskList');\n                            });\n                    },\n                }\n            }\n        }\n    }\n});\n","import { Node } from \"@tiptap/core\";\nimport { escapeHTML } from \"../../util/dom\";\n\n\nconst Text = Node.create({\n    name: 'text',\n});\n\nexport default Text.extend({\n    /**\n     * @return {{markdown: MarkdownNodeSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize(state, node) {\n                    state.text(escapeHTML(node.text));\n                },\n                parse: {\n                    // handled by markdown-it\n                },\n            }\n        }\n    }\n});\n","import { Mark } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Bold = Mark.create({\n    name: 'bold',\n});\n\nexport default Bold.extend({\n    /**\n     * @return {{markdown: MarkdownMarkSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.marks.strong,\n                parse: {\n                    // handled by markdown-it\n                }\n            },\n        }\n    }\n});\n","import { Mark } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Code = Mark.create({\n    name: 'code',\n});\n\nexport default Code.extend({\n    /**\n     * @return {{markdown: MarkdownMarkSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.marks.code,\n                parse: {\n                    // handled by markdown-it\n                }\n            }\n        }\n    }\n})\n","import { Mark } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Italic = Mark.create({\n    name: 'italic',\n});\n\nexport default Italic.extend({\n    /**\n     * @return {{markdown: MarkdownMarkSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.marks.em,\n                parse: {\n                    // handled by markdown-it\n                }\n            }\n        }\n    }\n})\n","import { Mark } from \"@tiptap/core\";\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\n\n\nconst Link = Mark.create({\n    name: 'link',\n});\n\nexport default Link.extend({\n    /**\n     * @return {{markdown: MarkdownMarkSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: defaultMarkdownSerializer.marks.link,\n                parse: {\n                    // handled by markdown-it\n                }\n            }\n        }\n    }\n})\n","import { Mark } from \"@tiptap/core\";\n\n\nconst Strike = Mark.create({\n    name: 'strike',\n});\n\nexport default Strike.extend({\n    /**\n     * @return {{markdown: MarkdownMarkSpec}}\n     */\n    addStorage() {\n        return {\n            markdown: {\n                serialize: {open: '~~', close: '~~', expelEnclosingWhitespace: true},\n                parse: {\n                    // handled by markdown-it\n                },\n            },\n        }\n    }\n});\n","import Blockquote from \"./nodes/blockquote\";\nimport BulletList from \"./nodes/bullet-list\";\nimport CodeBlock from \"./nodes/code-block\";\nimport HardBreak from \"./nodes/hard-break\";\nimport Heading from \"./nodes/heading\";\nimport HorizontalRule from \"./nodes/horizontal-rule\";\nimport HTMLNode from \"./nodes/html\";\nimport Image from \"./nodes/image\";\nimport ListItem from \"./nodes/list-item\";\nimport OrderedList from \"./nodes/ordered-list\";\nimport Paragraph from \"./nodes/paragraph\";\nimport Table from \"./nodes/table\";\nimport TaskItem from \"./nodes/task-item\";\nimport TaskList from \"./nodes/task-list\";\nimport Text from \"./nodes/text\";\n\nimport Bold from \"./marks/bold\";\nimport Code from \"./marks/code\";\nimport HTMLMark from \"./marks/html\";\nimport Italic from \"./marks/italic\";\nimport Link from \"./marks/link\";\nimport Strike from \"./marks/strike\";\n\n\nexport default [\n    Blockquote,\n    BulletList,\n    CodeBlock,\n    HardBreak,\n    Heading,\n    HorizontalRule,\n    HTMLNode,\n    Image,\n    ListItem,\n    OrderedList,\n    Paragraph,\n    Table,\n    TaskItem,\n    TaskList,\n    Text,\n\n    Bold,\n    Code,\n    HTMLMark,\n    Italic,\n    Link,\n    Strike,\n]\n","import markdownExtensions from \"../extensions\";\n\n\nexport function getMarkdownSpec(extension) {\n    const markdownSpec = extension.storage?.markdown;\n    const defaultMarkdownSpec = markdownExtensions.find(e => e.name === extension.name)?.storage.markdown;\n\n    if(markdownSpec || defaultMarkdownSpec) {\n        return {\n            ...defaultMarkdownSpec,\n            ...markdownSpec,\n        };\n    }\n\n    return null;\n}\n","import { MarkdownSerializerState } from './state';\nimport HTMLMark from \"../extensions/marks/html\";\nimport HTMLNode from \"../extensions/nodes/html\";\nimport { getMarkdownSpec } from \"../util/extensions\";\nimport HardBreak from \"../extensions/nodes/hard-break\";\n\n\nexport class MarkdownSerializer {\n    /**\n     * @type {import('@tiptap/core').Editor}\n     */\n    editor = null;\n\n    constructor(editor) {\n        this.editor = editor;\n    }\n\n    serialize(content) {\n        const state = new MarkdownSerializerState(this.nodes, this.marks, {\n            hardBreakNodeName: HardBreak.name,\n        });\n\n        state.renderContent(content);\n\n        return state.out;\n    }\n\n    get nodes() {\n        return {\n            ...Object.fromEntries(\n                Object.keys(this.editor.schema.nodes)\n                    .map(name => [name, this.serializeNode(HTMLNode)])\n            ),\n            ...Object.fromEntries(\n                this.editor.extensionManager.extensions\n                    .filter(extension => extension.type === 'node' && this.serializeNode(extension))\n                    .map(extension => [extension.name, this.serializeNode(extension)])\n                ?? []\n            ),\n        };\n    }\n\n    get marks() {\n        return {\n            ...Object.fromEntries(\n                Object.keys(this.editor.schema.marks)\n                    .map(name => [name, this.serializeMark(HTMLMark)])\n            ),\n            ...Object.fromEntries(\n                this.editor.extensionManager.extensions\n                    .filter(extension => extension.type === 'mark' && this.serializeMark(extension))\n                    .map(extension => [extension.name, this.serializeMark(extension)])\n                ?? []\n            ),\n        };\n    }\n\n    serializeNode(node) {\n        return getMarkdownSpec(node)?.serialize?.bind({ editor: this.editor, options: node.options });\n    }\n\n    serializeMark(mark) {\n        const serialize = getMarkdownSpec(mark)?.serialize;\n        return serialize\n            ? {\n                ...serialize,\n                open: typeof serialize.open === 'function' ? serialize.open.bind({ editor: this.editor, options: mark.options }) : serialize.open,\n                close: typeof serialize.close === 'function' ? serialize.close.bind({ editor: this.editor, options: mark.options }) : serialize.close,\n            }\n            : null\n    }\n}\n\n","import markdownit from \"markdown-it\";\nimport { elementFromString, extractElement, unwrapElement } from \"../util/dom\";\nimport { getMarkdownSpec } from \"../util/extensions\";\n\nexport class MarkdownParser {\n    /**\n     * @type {import('@tiptap/core').Editor}\n     */\n    editor = null;\n    /**\n     * @type {markdownit}\n     */\n    md = null;\n\n    constructor(editor, { html, linkify, breaks }) {\n        this.editor = editor;\n        this.md = this.withPatchedRenderer(markdownit({\n            html,\n            linkify,\n            breaks,\n        }));\n    }\n\n    parse(content, { inline } = {}) {\n        if(typeof content === 'string') {\n            this.editor.extensionManager.extensions.forEach(extension =>\n                getMarkdownSpec(extension)?.parse?.setup?.call({ editor:this.editor, options:extension.options }, this.md)\n            );\n\n            const renderedHTML = this.md.render(content);\n            const element = elementFromString(renderedHTML);\n\n            this.editor.extensionManager.extensions.forEach(extension =>\n                getMarkdownSpec(extension)?.parse?.updateDOM?.call({ editor:this.editor, options:extension.options }, element)\n            );\n\n            this.normalizeDOM(element, { inline, content });\n\n            return element.innerHTML;\n        }\n\n        return content;\n    }\n\n    normalizeDOM(node, { inline, content }) {\n        this.normalizeBlocks(node);\n\n        // remove all \\n appended by markdown-it\n        node.querySelectorAll('*').forEach(el => {\n            if(el.nextSibling?.nodeType === Node.TEXT_NODE && !el.closest('pre')) {\n                el.nextSibling.textContent = el.nextSibling.textContent.replace(/^\\n/, '');\n            }\n        });\n\n        if(inline) {\n            this.normalizeInline(node, content);\n        }\n\n        return node;\n    }\n\n    normalizeBlocks(node) {\n        const blocks = Object.values(this.editor.schema.nodes)\n            .filter(node => node.isBlock);\n\n        const selector = blocks\n            .map(block => block.spec.parseDOM?.map(spec => spec.tag))\n            .flat()\n            .filter(Boolean)\n            .join(',');\n\n        if(!selector) {\n            return;\n        }\n\n        [...node.querySelectorAll(selector)].forEach(el => {\n            if(el.parentElement.matches('p')) {\n                extractElement(el);\n            }\n        });\n    }\n\n    normalizeInline(node, content) {\n        if(node.firstElementChild?.matches('p')) {\n            const firstParagraph = node.firstElementChild;\n            const { nextElementSibling } = firstParagraph;\n            const startSpaces = content.match(/^\\s+/)?.[0] ?? '';\n            const endSpaces = !nextElementSibling\n                ? content.match(/\\s+$/)?.[0] ?? ''\n                : '';\n\n            if(content.match(/^\\n\\n/)) {\n                firstParagraph.innerHTML = `${firstParagraph.innerHTML}${endSpaces}`;\n                return;\n            }\n\n            unwrapElement(firstParagraph);\n\n            node.innerHTML = `${startSpaces}${node.innerHTML}${endSpaces}`;\n        }\n    }\n\n    /**\n     * @param {markdownit} md\n     */\n    withPatchedRenderer(md) {\n        const withoutNewLine = (renderer) => (...args) => {\n            const rendered = renderer(...args);\n            if(rendered === '\\n') {\n                return '<p></p>'; // keep soft breaks\n            }\n            if(rendered[rendered.length - 1] === '\\n') {\n                return rendered.slice(0, -1);\n            }\n            return rendered;\n        }\n\n        md.renderer.rules.hardbreak = withoutNewLine(md.renderer.rules.hardbreak);\n        md.renderer.rules.softbreak = withoutNewLine(md.renderer.rules.softbreak);\n        md.renderer.rules.fence = withoutNewLine(md.renderer.rules.fence);\n        md.renderer.rules.code_block = withoutNewLine(md.renderer.rules.code_block);\n        md.renderer.renderToken = withoutNewLine(md.renderer.renderToken.bind(md.renderer));\n\n        return md;\n    }\n}\n\n","import { Extension } from \"@tiptap/core\";\nimport { Plugin, PluginKey } from '@tiptap/pm/state';\nimport { DOMParser } from '@tiptap/pm/model';\nimport { elementFromString } from \"../../util/dom\";\n\nexport const MarkdownClipboard = Extension.create({\n    name: 'markdownClipboard',\n    addOptions() {\n        return {\n            transformPastedText: false,\n            transformCopiedText: false,\n        }\n    },\n    addProseMirrorPlugins() {\n        return [\n            new Plugin({\n                key: new PluginKey('markdownClipboard'),\n                props: {\n                    clipboardTextParser: (text, context, plainText) => {\n                        if(plainText || !this.options.transformPastedText) {\n                            return null; // pasting with shift key prevents formatting\n                        }\n                        const parsed = this.editor.storage.markdown.parser.parse(text, { inline: true });\n                        return DOMParser.fromSchema(this.editor.schema)\n                            .parseSlice(elementFromString(parsed), {\n                                preserveWhitespace: true,\n                                context,\n                            });\n                    },\n                    /**\n                     * @param {import('prosemirror-model').Slice} slice\n                     */\n                    clipboardTextSerializer: (slice) => {\n                        if(!this.options.transformCopiedText) {\n                            return null;\n                        }\n                        return this.editor.storage.markdown.serializer.serialize(slice.content);\n                    },\n                },\n            })\n        ]\n    }\n})\n","import { Extension, extensions } from '@tiptap/core';\nimport { MarkdownTightLists } from \"./extensions/tiptap/tight-lists\";\nimport { MarkdownSerializer } from \"./serialize/MarkdownSerializer\";\nimport { MarkdownParser } from \"./parse/MarkdownParser\";\nimport { MarkdownClipboard } from \"./extensions/tiptap/clipboard\";\n\nexport const Markdown = Extension.create({\n    name: 'markdown',\n    priority: 50,\n    addOptions() {\n        return {\n            html: true,\n            tightLists: true,\n            tightListClass: 'tight',\n            bulletListMarker: '-',\n            linkify: false,\n            breaks: false,\n            transformPastedText: false,\n            transformCopiedText: false,\n        }\n    },\n    addCommands() {\n        const commands = extensions.Commands.config.addCommands();\n        return {\n            setContent: (content, emitUpdate, parseOptions) => (props) => {\n                return commands.setContent(\n                    props.editor.storage.markdown.parser.parse(content),\n                    emitUpdate,\n                    parseOptions\n                )(props);\n            },\n            insertContentAt: (range, content, options) => (props) => {\n                return commands.insertContentAt(\n                    range,\n                    props.editor.storage.markdown.parser.parse(content, { inline: true }),\n                    options\n                )(props);\n            },\n        }\n    },\n    onBeforeCreate() {\n        this.editor.storage.markdown = {\n            options: { ...this.options },\n            parser: new MarkdownParser(this.editor, this.options),\n            serializer: new MarkdownSerializer(this.editor),\n            getMarkdown: () => {\n                return this.editor.storage.markdown.serializer.serialize(this.editor.state.doc);\n            },\n        }\n        this.editor.options.initialContent = this.editor.options.content;\n        this.editor.options.content = this.editor.storage.markdown.parser.parse(this.editor.options.content);\n    },\n    onCreate() {\n        this.editor.options.content = this.editor.options.initialContent;\n        delete this.editor.options.initialContent;\n    },\n    addStorage() {\n        return {\n            /// storage will be defined in onBeforeCreate() to prevent initial object overriding\n        }\n    },\n    addExtensions() {\n        return [\n            MarkdownTightLists.configure({\n                tight: this.options.tightLists,\n                tightClass: this.options.tightListClass,\n            }),\n            MarkdownClipboard.configure({\n                transformPastedText: this.options.transformPastedText,\n                transformCopiedText: this.options.transformCopiedText,\n            }),\n        ]\n    },\n});\n"],"names":["MarkdownTightLists","Extension","create","name","addOptions","tight","tightClass","listTypes","addGlobalAttributes","types","options","attributes","default","parseHTML","element","getAttribute","querySelector","renderHTML","class","addCommands","_this","toggleTight","arguments","length","undefined","_ref","editor","commands","isActive","attrs","getAttributes","updateAttributes","some","md","markdownit","scanDelims","text","pos","inline","State","prototype","call","src","posMax","state","shiftDelim","delim","start","offset","res","substring","trimStart","from","to","can_open","trimEnd","can_close","trimInline","MarkdownSerializerState","BaseMarkdownSerializerState","constructor","nodes","marks","inTable","inlines","render","node","parent","index","type","content","size","out","top","end","delimiter","normalizeInline","pop","renderContent","fragment","forEach","_","i","markString","mark","open","info","expelEnclosingWhitespace","push","charAt","match","Mark","addStorage","markdown","serialize","_getMarkTags$","_getMarkTags","storage","html","console","warn","getMarkTags","close","_getMarkTags$2","_getMarkTags2","parse","schema","getHTMLFromFragment","Fragment","elementFromString","value","wrappedValue","window","DOMParser","parseFromString","body","escapeHTML","replace","extractElement","parentElement","prepend","cloneNode","firstChild","appendChild","childNodes","insertBefore","remove","unwrapElement","parentNode","removeChild","Node","write","serializeHTML","isBlock","closeBlock","topNodeType","formatBlock","dom","firstElementChild","innerHTML","trim","outerHTML","Blockquote","extend","defaultMarkdownSerializer","blockquote","BulletList","renderList","bulletListMarker","CodeBlock","language","textContent","ensureNewLine","setup","_this$options$languag","set","langPrefix","languageClassPrefix","updateDOM","HardBreak","childCount","child","HTMLNode","Heading","heading","HorizontalRule","horizontal_rule","Image","image","ListItem","list_item","OrderedList","findIndexOfAdjacentNode","maxW","String","space","repeat","adjacentIndex","separator","nStr","Paragraph","paragraph","_node$content$content","_node$content","Table","isMarkdownSerializable","row","p","col","j","cellContent","renderInline","delimiterRow","Array","map","join","hasSpan","colspan","rowspan","rows","firstRow","bodyRows","slice","cell","TaskItem","check","checked","querySelectorAll","item","input","setAttribute","TaskList","use","taskListPlugin","list","Text","Bold","strong","Code","code","Italic","em","Link","link","Strike","HTMLMark","getMarkdownSpec","extension","_extension$storage","_markdownExtensions$f","markdownSpec","defaultMarkdownSpec","markdownExtensions","find","e","MarkdownSerializer","hardBreakNodeName","_this$editor$extensio","Object","fromEntries","keys","serializeNode","extensionManager","extensions","filter","_this$editor$extensio2","serializeMark","_getMarkdownSpec","bind","_getMarkdownSpec2","MarkdownParser","linkify","breaks","withPatchedRenderer","renderedHTML","normalizeDOM","_ref2","normalizeBlocks","el","_el$nextSibling","nextSibling","nodeType","TEXT_NODE","closest","blocks","values","selector","block","_block$spec$parseDOM","spec","parseDOM","tag","flat","Boolean","matches","_node$firstElementChi","_content$match$","_content$match","_content$match$2","_content$match2","firstParagraph","nextElementSibling","startSpaces","endSpaces","withoutNewLine","renderer","rendered","rules","hardbreak","softbreak","fence","code_block","renderToken","MarkdownClipboard","transformPastedText","transformCopiedText","addProseMirrorPlugins","Plugin","key","PluginKey","props","clipboardTextParser","context","plainText","parsed","parser","fromSchema","parseSlice","preserveWhitespace","clipboardTextSerializer","serializer","Markdown","priority","tightLists","tightListClass","Commands","config","setContent","emitUpdate","parseOptions","insertContentAt","range","onBeforeCreate","getMarkdown","doc","initialContent","onCreate","addExtensions","configure"],"mappings":"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"}